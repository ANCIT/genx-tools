package com.ancit.testgenx.exports.pycan;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import org.eclipse.emf.common.util.EList;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.FileDialog;

import com.ancit.testgenx.ui.extnpt.ITSEExport;

import DiagonosticModel.CheckAction;
import DiagonosticModel.ForLoop;
import DiagonosticModel.OperatorTypeEnum;
import DiagonosticModel.SetAction;
import DiagonosticModel.TestCase;
import DiagonosticModel.TestGroup;
import DiagonosticModel.TestSpecification;
import DiagonosticModel.TestStep;

public class PyCanNodeTesterExport implements ITSEExport {

	public PyCanNodeTesterExport() {
		// TODO Auto-generated constructor stub
	}

	TestSpecification testSpecification;
	private HardwareSelectionForPythonCodeDialog hardwareDialog;
	private File createNewFilesForHtml_py;
	private ArrayList<String> errors = new ArrayList<String>();
	private ArrayList<String> groupsToAvoid;

	@Override
	public void export(TestSpecification testSpecification) {

		groupsToAvoid = new ArrayList<String>();
		this.testSpecification = testSpecification;
		hardwareDialog = new HardwareSelectionForPythonCodeDialog(Display.getDefault().getActiveShell(),
				testSpecification, null);
		int result = hardwareDialog.open();

		if (IDialogConstants.OK_ID == result) {

			StringBuffer pyTesterContent = new StringBuffer();

			String description = (null != testSpecification.getDescription() ? testSpecification.getDescription() : "");
			String author = (null != testSpecification.getAuthor() ? testSpecification.getAuthor() : "");
			String functionName = (null != testSpecification.getFunctionName() ? testSpecification.getFunctionName()
					: "");
			String functionVersion = (null != testSpecification.getFunctionVersion()
					? testSpecification.getFunctionVersion()
					: "");

			String version = null != testSpecification.getVersion() ? testSpecification.getVersion() : "1.0.0";

			pyTesterContent.append("\n# " + testSpecification.getName() + "_" + version);
			pyTesterContent.append("\n# Description : " + description);
			pyTesterContent.append("\n# Author : " + author);
			pyTesterContent.append("\n# Function Name : " + functionName + "_" + functionVersion);
			pyTesterContent.append("\n# This Python Test Script is generated by Test Case Genx 1.0.0");

			pyTesterContent.append("\nimport cantools");
			pyTesterContent.append("\nimport can");
			pyTesterContent.append("\nimport unittest");
			pyTesterContent.append("\nfrom unittest.loader import TestLoader");
			pyTesterContent.append("\nfrom unittest.suite import TestSuite");
			pyTesterContent.append("\nimport HtmlTestRunner");
			pyTesterContent.append("\n");

			pyTesterContent.append("def setup_confrigration():");
			String dbcFilepath = testSpecification.getImportArtifacts().get(1).getPath().replace("\\", "/");
			pyTesterContent.append("\n\tdbc = cantools.database.load_file('" + dbcFilepath + "')");
			pyTesterContent.append("\n\tcan_bus = can.interface.Bus(" + hardwareDialog.getConfigration() + ")");
			pyTesterContent.append(
					"\n\ttester = cantools.tester.Tester('" + hardwareDialog.getNode() + "', dbc, can_bus, None)");

			pyTesterContent.append("\n\treturn tester\n");

			EList<TestGroup> testGroups = testSpecification.getTestGroups();
			for (TestGroup testGroup : testGroups) {

				if (testGroup.getName() == null || testGroup.getName().trim().isEmpty()) {
					errors.add("Test Group No. " + (testGroups.indexOf(testGroup) + 1) + " Name is Missing");
				}

				EList<TestCase> testCases = testGroup.getTestCases();
				boolean noTestCaseEnabled = true;
				for (TestCase testCase : testCases) {
					noTestCaseEnabled = testCase.isSkip();
					if (noTestCaseEnabled) {
						break;
					}
					groupsToAvoid.add(testGroup.getName());
				}

				if (!noTestCaseEnabled) {
					continue;
				}

				pyTesterContent.append("# Test Group Name : " + testGroup.getName().replace(" ", "_") + "\n"
						+ ("#" + (testGroup.getDescription() != null ? testGroup.getDescription() : "")) + "\n");
				pyTesterContent.append("class " + testGroup.getName() + "(unittest.TestCase):\n");

				for (TestCase testCase : testCases) {
					System.out.println(testCase.isSkip());
					if (testCase.isSkip()) {

						if (testCase.getName() == null || testCase.getName().trim().isEmpty()) {
							errors.add("Test Case No. " + (testCases.indexOf(testCase) + 1)
									+ " Name is Missing under Test Group" + testGroup.getName());
						}

						pyTesterContent.append(
								"\n\t" + "# Test Case :" + testCase.getId() + " >> " + testCase.getName() + "\n");
						pyTesterContent.append("\n\t" + "# " + testCase.getDescription());
						pyTesterContent.append("\n\t" + "def test_" + testCase.getName().replace(" ", "_") + "(self):");

						// Start Tester
						pyTesterContent.append("\n\t\t" + "tester = setup_confrigration()");
						pyTesterContent.append("\n\t\t" + "tester.start()");
						pyTesterContent.append("\n");
						// Action Block
						pyTesterContent.append("\n\t\t" + "# Action Block");
						EList<TestStep> testSteps = testCase.getTestSteps();
						int tab = 2;
						generateTesterScript(pyTesterContent, testSteps, tab,null);
						pyTesterContent.append("\n");
						pyTesterContent.append("\n\t\t" + "tester.stop()");
						pyTesterContent.append("\n");
					}
				}

			}

			pyTesterContent.append("def suite():");
			pyTesterContent.append("\n\t" + "suite = TestSuite([");
			for (TestGroup testGroup : testGroups) {
				if (groupsToAvoid.contains(testGroup.getName())) {
					continue;
				}
				if (testGroups.indexOf(testGroup) == testGroups.size() - 1) {
					pyTesterContent.append("TestLoader().loadTestsFromTestCase(" + testGroup.getName() + ")");
				} else {
					pyTesterContent.append("TestLoader().loadTestsFromTestCase(" + testGroup.getName() + "),");
				}
			}
			pyTesterContent.append("])");
			pyTesterContent.append("\n\t" + "return suite");

			String htmlReportPath = hardwareDialog.getLocation();
			htmlReportPath = htmlReportPath.replace("\\", "\\\\");

			pyTesterContent.append("\ndef htmlRun(suite):");

			pyTesterContent.append("\n\t\trunner = HtmlTestRunner.HTMLTestRunner(output='" + htmlReportPath
					+ "',report_title=\"" + testSpecification.getName() + "_" + version
					+ " Test Execution Report\",report_name=\"TestExecutionReport_" + testSpecification.getName() + "_"
					+ version + "\",add_timestamp=True, combine_reports=True)");
			pyTesterContent.append("\n\t\trunner.run(suite)");

			pyTesterContent.append("\nif __name__ == '__main__':");
			pyTesterContent.append("\n\t" + "htmlRun(suite())");

			File file = writeToFile(pyTesterContent);

			if (file != null && hardwareDialog.isRunPython()) {

				if (System.getProperty("os.name").contains("Win")) {

					try {
						// We are running "dir" and "ping" command on cmd
						Runtime runtime = Runtime.getRuntime();

						String[] cmdArray = new String[] { "cmd", "/c", "start", "cmd.exe", "/K", "python",
								"\"" + file.getAbsolutePath() + "\"" };
						ProcessBuilder processBuilder = new ProcessBuilder(cmdArray);
						processBuilder.directory(file.getParentFile().getAbsoluteFile());
						processBuilder.start();
					} catch (Exception e) {
						System.out.println("HEY Buddy ! U r Doing Something Wrong ");
						e.printStackTrace();
					}

				}
			}
		} else {
			System.out.println("Else work");
		}

	}

	private void generateTesterScript(StringBuffer pyTesterContent, EList<TestStep> testSteps, int tab,String loopVariable) {
		int count = 0;

		for (TestStep testStep : testSteps) {
			count++;
			if (testStep instanceof SetAction) {
				generateSetLogic(pyTesterContent, count, testStep, tab,loopVariable);

			} else if (testStep instanceof CheckAction) {
				generateCheckLogic(pyTesterContent, count, testStep, tab,loopVariable);
			} else if (testStep instanceof ForLoop) {

				String tabGenerate = getTab(tab);
				ForLoop loopVar = (ForLoop) testStep;
				EList<TestStep> testStepList = loopVar.getTestSteps();
				pyTesterContent.append("\n" + tabGenerate + "for " + loopVar.getLoopVar() + " in range("
						+ loopVar.getStartValue() + "," + loopVar.getStopValue() + "):");
				pyTesterContent.append("\n");
				tab++;
				generateTesterScript(pyTesterContent, testStepList, tab, loopVar.getLoopVar());
				pyTesterContent.append("\n");

			}
		}
	}

	private void generateSetLogic(StringBuffer pyTesterContent, int count, TestStep testStep, int tab, String loopVariable) {
		SetAction setAction = (SetAction) testStep;
		String tabGenerate = getTab(tab);
		String msgName = "'" + setAction.getKey().getMessageName() + "'";
		String signalName = "'" + setAction.getKey().getName() + "'";
		String signalValue = (loopVariable == null ? setAction.getValue() : loopVariable);
		String stepDetails = "SET " + signalName + " = " +signalValue ;
		if (setAction.getKey().getLookupValues().size() > 0) {
			signalValue = "'" + signalValue + "'";
		}

		pyTesterContent
				.append("\n" + tabGenerate + "print(\"Executing Test Step " + count + " " + stepDetails + " \")");
		pyTesterContent
				.append("\n" + tabGenerate + "tester.send(" + msgName + ", {" + signalName + ": " + signalValue + "})");
	}

	private String getTab(int tb) {
		StringBuffer tab = new StringBuffer();
		for (int i = 0; i < tb; i++) {
			tab.append("\t");
		}
		return tab.toString();
	}

	private void generateCheckLogic(StringBuffer pyTesterContent, int count, TestStep testStep, int tab, String loopVariable) {
		CheckAction checkAction = (CheckAction) testStep;
		String tabGenerate = getTab(tab);
		String msgName = "'" + checkAction.getKey().getMessageName() + "'";
		String signalName = "'" + checkAction.getKey().getName() + "'";
		String signalValue = (loopVariable == null ? checkAction.getValue() : loopVariable);;
		String stepDetails = "CHECK " + signalName + " = " + signalValue;

		if (checkAction.getKey().getLookupValues().size() > 0) {
			signalValue = "'" + signalValue + "'";
		}

		OperatorTypeEnum operator = checkAction.getOperator();
		pyTesterContent
				.append("\n" + tabGenerate + "print(\"Executing Test Step " + count + " " + stepDetails + " \")");
		float wait = checkAction.getWait();
		String timeOutString = wait > 0 ? " timeout=" + wait : " timeout=None";

		pyTesterContent.append("\n" + tabGenerate + "status = tester.expect(" + msgName + ", signals=None, "
				+ timeOutString + ", discard_other_messages=False)");

		String compareString = "\n" + tabGenerate + "actualValue  = status[" + signalName + "]" + "\n" + tabGenerate
				+ "expectedValue = " + signalValue;

		if (operator.equals(OperatorTypeEnum.EQ)) {
			// ({'LockState': 'Unlocked'}, status,"Not Found")
			pyTesterContent.append("\n" + tabGenerate + compareString);
			pyTesterContent.append("\n" + tabGenerate + "self.assertEqual(expectedValue,actualValue,\"Not Equals\")");
		} else if (operator.equals(OperatorTypeEnum.NE)) {
			pyTesterContent.append("\n" + tabGenerate + compareString);
			pyTesterContent.append("\n" + tabGenerate + "self.assertNotEqual(expectedValue,actualValue,\"Equals\")");
		} else if (operator.equals(OperatorTypeEnum.GT)) {
			pyTesterContent.append("\n" + tabGenerate + compareString);
			pyTesterContent
					.append("\n" + tabGenerate + "self.assertGreater(expectedValue,actualValue,\"Not Greater than\")");
		} else if (operator.equals(OperatorTypeEnum.LT)) {
			pyTesterContent.append("\n" + tabGenerate + compareString);
			pyTesterContent.append("\n" + tabGenerate + "self.assertLess(expectedValue,actualValue,\"Not Less Than\")");
		}
	}

	private File writeToFile(StringBuffer content) {
		FileWriter fw = null;
		File file = null;

		createNewFilesForHtml_py = new File(hardwareDialog.getLocation());
		boolean isCreated = createNewFilesForHtml_py.mkdirs();
		if (!isCreated) {
			createNewFilesForHtml_py.delete();
			createNewFilesForHtml_py.mkdirs();
		}
		System.out.println("File : " + hardwareDialog.getLocation());
		if (hardwareDialog != null) {
			try {
				file = new File(createNewFilesForHtml_py + "//" + hardwareDialog.getFileName() + ".py");
				if (!file.exists()) {
					file.createNewFile();
				}
				fw = new FileWriter(file);
				fw.write(content.toString());
				fw.flush();
				fw.close();
				System.out.println("File written Succesfully");
				if (errors.size() > 0) {
					StringBuffer errorContent = new StringBuffer();
					for (String error : errors) {
						errorContent.append(error + "\n");
					}
					MessageDialog.openError(Display.getDefault().getActiveShell(), "File Generated with Errors",
							"File Generated with following Errors \n" + errorContent.toString());
					return null;
				} else {
					MessageDialog.openInformation(Display.getDefault().getActiveShell(), "File Generated",
							"File Generated successfully!");
					return file;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return null;
	}

}
