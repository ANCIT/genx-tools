/**
 */
package DiagonosticModel.provider;

import DiagonosticModel.util.DiagonosticModelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DiagonosticModelItemProviderAdapterFactory extends DiagonosticModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DiagonosticModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.TestSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestSpecificationItemProvider testSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.TestSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestSpecificationAdapter() {
		if (testSpecificationItemProvider == null) {
			testSpecificationItemProvider = new TestSpecificationItemProvider(this);
		}

		return testSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.TestGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestGroupItemProvider testGroupItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.TestGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestGroupAdapter() {
		if (testGroupItemProvider == null) {
			testGroupItemProvider = new TestGroupItemProvider(this);
		}

		return testGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.TestCase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCaseItemProvider testCaseItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.TestCase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCaseAdapter() {
		if (testCaseItemProvider == null) {
			testCaseItemProvider = new TestCaseItemProvider(this);
		}

		return testCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.WaitAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaitActionItemProvider waitActionItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.WaitAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaitActionAdapter() {
		if (waitActionItemProvider == null) {
			waitActionItemProvider = new WaitActionItemProvider(this);
		}

		return waitActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.CheckAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CheckActionItemProvider checkActionItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.CheckAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCheckActionAdapter() {
		if (checkActionItemProvider == null) {
			checkActionItemProvider = new CheckActionItemProvider(this);
		}

		return checkActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.SetAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetActionItemProvider setActionItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.SetAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetActionAdapter() {
		if (setActionItemProvider == null) {
			setActionItemProvider = new SetActionItemProvider(this);
		}

		return setActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.SignalType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignalTypeItemProvider signalTypeItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.SignalType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignalTypeAdapter() {
		if (signalTypeItemProvider == null) {
			signalTypeItemProvider = new SignalTypeItemProvider(this);
		}

		return signalTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.DiagnosticService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagnosticServiceItemProvider diagnosticServiceItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.DiagnosticService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagnosticServiceAdapter() {
		if (diagnosticServiceItemProvider == null) {
			diagnosticServiceItemProvider = new DiagnosticServiceItemProvider(this);
		}

		return diagnosticServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.ExternalReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalReferenceItemProvider externalReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.ExternalReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalReferenceAdapter() {
		if (externalReferenceItemProvider == null) {
			externalReferenceItemProvider = new ExternalReferenceItemProvider(this);
		}

		return externalReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.CAPLTestCase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CAPLTestCaseItemProvider caplTestCaseItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.CAPLTestCase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCAPLTestCaseAdapter() {
		if (caplTestCaseItemProvider == null) {
			caplTestCaseItemProvider = new CAPLTestCaseItemProvider(this);
		}

		return caplTestCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.CAPLParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CAPLParamItemProvider caplParamItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.CAPLParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCAPLParamAdapter() {
		if (caplParamItemProvider == null) {
			caplParamItemProvider = new CAPLParamItemProvider(this);
		}

		return caplParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.Variant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariantItemProvider variantItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.Variant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariantAdapter() {
		if (variantItemProvider == null) {
			variantItemProvider = new VariantItemProvider(this);
		}

		return variantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.CAPLTestStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CAPLTestStepItemProvider caplTestStepItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.CAPLTestStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCAPLTestStepAdapter() {
		if (caplTestStepItemProvider == null) {
			caplTestStepItemProvider = new CAPLTestStepItemProvider(this);
		}

		return caplTestStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.ImportArtifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportArtifactItemProvider importArtifactItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.ImportArtifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportArtifactAdapter() {
		if (importArtifactItemProvider == null) {
			importArtifactItemProvider = new ImportArtifactItemProvider(this);
		}

		return importArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.DiagnosticRequest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagnosticRequestItemProvider diagnosticRequestItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.DiagnosticRequest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagnosticRequestAdapter() {
		if (diagnosticRequestItemProvider == null) {
			diagnosticRequestItemProvider = new DiagnosticRequestItemProvider(this);
		}

		return diagnosticRequestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.DiagnosticResponse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagnosticResponseItemProvider diagnosticResponseItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.DiagnosticResponse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagnosticResponseAdapter() {
		if (diagnosticResponseItemProvider == null) {
			diagnosticResponseItemProvider = new DiagnosticResponseItemProvider(this);
		}

		return diagnosticResponseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.DiagnosticParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagnosticParamItemProvider diagnosticParamItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.DiagnosticParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagnosticParamAdapter() {
		if (diagnosticParamItemProvider == null) {
			diagnosticParamItemProvider = new DiagnosticParamItemProvider(this);
		}

		return diagnosticParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.BlockAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockActionItemProvider blockActionItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.BlockAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockActionAdapter() {
		if (blockActionItemProvider == null) {
			blockActionItemProvider = new BlockActionItemProvider(this);
		}

		return blockActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.ForLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForLoopItemProvider forLoopItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.ForLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForLoopAdapter() {
		if (forLoopItemProvider == null) {
			forLoopItemProvider = new ForLoopItemProvider(this);
		}

		return forLoopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.WhileLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileLoopItemProvider whileLoopItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.WhileLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhileLoopAdapter() {
		if (whileLoopItemProvider == null) {
			whileLoopItemProvider = new WhileLoopItemProvider(this);
		}

		return whileLoopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.Var} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarItemProvider varItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.Var}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarAdapter() {
		if (varItemProvider == null) {
			varItemProvider = new VarItemProvider(this);
		}

		return varItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.OneOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OneOfItemProvider oneOfItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.OneOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOneOfAdapter() {
		if (oneOfItemProvider == null) {
			oneOfItemProvider = new OneOfItemProvider(this);
		}

		return oneOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.Range} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RangeItemProvider rangeItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.Range}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRangeAdapter() {
		if (rangeItemProvider == null) {
			rangeItemProvider = new RangeItemProvider(this);
		}

		return rangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DiagonosticModel.TracebilityArtifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TracebilityArtifactItemProvider tracebilityArtifactItemProvider;

	/**
	 * This creates an adapter for a {@link DiagonosticModel.TracebilityArtifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTracebilityArtifactAdapter() {
		if (tracebilityArtifactItemProvider == null) {
			tracebilityArtifactItemProvider = new TracebilityArtifactItemProvider(this);
		}

		return tracebilityArtifactItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (testSpecificationItemProvider != null) testSpecificationItemProvider.dispose();
		if (testGroupItemProvider != null) testGroupItemProvider.dispose();
		if (testCaseItemProvider != null) testCaseItemProvider.dispose();
		if (waitActionItemProvider != null) waitActionItemProvider.dispose();
		if (checkActionItemProvider != null) checkActionItemProvider.dispose();
		if (setActionItemProvider != null) setActionItemProvider.dispose();
		if (signalTypeItemProvider != null) signalTypeItemProvider.dispose();
		if (diagnosticServiceItemProvider != null) diagnosticServiceItemProvider.dispose();
		if (externalReferenceItemProvider != null) externalReferenceItemProvider.dispose();
		if (caplTestCaseItemProvider != null) caplTestCaseItemProvider.dispose();
		if (caplParamItemProvider != null) caplParamItemProvider.dispose();
		if (variantItemProvider != null) variantItemProvider.dispose();
		if (caplTestStepItemProvider != null) caplTestStepItemProvider.dispose();
		if (importArtifactItemProvider != null) importArtifactItemProvider.dispose();
		if (diagnosticRequestItemProvider != null) diagnosticRequestItemProvider.dispose();
		if (diagnosticResponseItemProvider != null) diagnosticResponseItemProvider.dispose();
		if (diagnosticParamItemProvider != null) diagnosticParamItemProvider.dispose();
		if (blockActionItemProvider != null) blockActionItemProvider.dispose();
		if (forLoopItemProvider != null) forLoopItemProvider.dispose();
		if (whileLoopItemProvider != null) whileLoopItemProvider.dispose();
		if (varItemProvider != null) varItemProvider.dispose();
		if (oneOfItemProvider != null) oneOfItemProvider.dispose();
		if (rangeItemProvider != null) rangeItemProvider.dispose();
		if (tracebilityArtifactItemProvider != null) tracebilityArtifactItemProvider.dispose();
	}

}
